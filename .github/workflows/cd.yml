name: CI/CD

on:
  pull_request:
    types: [closed]

jobs:
  front_build_deploy:
    runs-on: ubuntu-latest
    
    steps:
      # 最新のbranchへ移動
      - name: Checkout latest branch
        uses: actions/checkout@v3

      # Node.js環境を作成
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: yarn build & install
        working-directory: ./frontend
        env:
          VITE_RAILS_API_DOMEIN: ${{ secrets.VITE_RAILS_API_DOMEIN }}
        run: |
          yarn install
          yarn build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_S3_REGION }}

      - name: Deploy to S3
        run: aws s3 sync ./frontend/dist s3://${{ secrets.AWS_S3_BUCKET_NAME }} --delete

      - name: CloudFront Cache Clear
        run: aws cloudfront create-invalidation --distribution-id E1YTC78FV7ZKXX --paths "/*"
  
  backend_deploy:
    runs-on: ubuntu-latest
    steps:

      # ランナーのIPを取得するライブラリ
      - name: Public IP
        id: ip
        uses: haythem/public-ip@v1.3

      - name: checkout latest branch
        uses: actions/checkout@v3
      
      # AWS CLIを利用可能にする
      - name: AWS OIDC by IAM
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_S3_REGION }}
      
      # AWS CLIがあるか確認
      - name: check aws-cli
        run: aws --version

      - name: deploy
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_EC2_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

          echo "${{ secrets.PRIVATE_KEY_FOR_SSH }}" > private_key
          chmod 600 private_key

          ssh -o StrictHostKeyChecking=no -i private_key ${{ secrets.USER_EC2 }}@${{ secrets.HOST_EC2 }} \
          "cd ~/var/www/diet_support_app && \
          git pull origin main && \
          cd ./backend && \
          bundle install && \
          RAILS_ENV=production rails db:migrate && \
          sudo systemctl restart puma"

          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_EC2_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
